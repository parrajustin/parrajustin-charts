{{- include "ix.v1.common.loader.init" . -}}


{{/* Make sure there are not any YAML errors */}}
{{- include "ix.v1.common.values.validate" .Values -}}

---
apiVersion: v1
kind: Secret
metadata:
  # Note how the Secret is named
  name: mongodb-secrets
type: Opaque
stringData:
  mongodbPassword: {{ .Values.mongodbPassword }}
  mongodbRootPassword: {{ .Values.mongodbRootPassword }}

---
{{ include "common.storage.hostPathValidate" .Values }}
{{ include "common.deployment.common_config" . | nindent 0 }}
spec: {{ include "common.deployment.common_spec" . | nindent 2 }}
  template: {{ include "common.deployment.pod.metadata" . | nindent 4 }}
    spec:
      hostNetwork: {{ .Values.hostNetwork }}
    {{- if .Values.hostNetwork }}
      dnsPolicy: ClusterFirstWithHostNet
    {{- end }}
      hostname: {{ template "common.names.fullname" . }}
      {{- if hasKey .Values "global" }}
        {{- if hasKey .Values.global "ixChartContext" }}
          {{- if .Values.global.ixChartContext.addNvidiaRuntimeClass }}
      runtimeClassName: {{ .Values.global.ixChartContext.nvidiaRuntimeClassName }}
          {{- end }}
        {{- end }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{ include "common.resources.limitation" . | nindent 10 }}
          {{ include "common.containers.imageConfig" .Values.image | nindent 10 }}
          volumeMounts: {{ include "common.storage.configureAppVolumeMountsInContainer" .Values | nindent 12 }}
            {{ range $index, $hostPathConfiguration := .Values.extraAppVolumeMounts }}
            - name: extrappvolume-{{ $index }}
              mountPath: {{ $hostPathConfiguration.mountPath }}
              {{ if $hostPathConfiguration.readOnly }}
              readOnly: {{ $hostPathConfiguration.readOnly }}
              {{ end }}
            {{ end }}
          ports:
          - name: "mongodb-port"
            protocol: TCP
            containerPort: 27017
            hostPort: {{ .Values.MongodbApplicationPort }}
          env:
            - name: KUBE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongodb-secrets
                  key: mongodbPassword
            - name: MONGODB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongodb-secrets
                  key: mongodbRootPassword
            {{ $envList := (default list .Values.environmentVariables) }}
            {{ if and .Values.gpuConfiguration (hasKey .Values.gpuConfiguration "nvidia.com/gpu") (gt (get .Values.gpuConfiguration "nvidia.com/gpu" | toDecimal) 0) }}
            {{ $envList = mustAppend $envList (dict "name" "NVIDIA_DRIVER_CAPABILITIES" "value" "all") }}
            {{ end }}
            {{ $envList = mustAppend $envList (dict "name" "MONGODB_USERNAME" "value" .Values.mongodbUsername) }}
            {{ $envList = mustAppend $envList (dict "name" "MONGODB_DATABASE" "value" .Values.mongodbDatabase) }}
            {{ include "common.containers.environmentVariables" (dict "environmentVariables" $envList) | nindent 12 }}
          readinessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - echo "db.runCommand(\"ping\")" | mongosh --host localhost --port 27017 ${MONGODB_DATABASE} --quiet
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
            successThreshold: 2
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - echo "db.runCommand(\"ping\")" | mongosh --host localhost --port 27017 ${MONGODB_DATABASE} --quiet
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
            successThreshold: 1
          startupProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - echo "db.runCommand(\"ping\")" | mongosh --host localhost --port 27017 ${MONGODB_DATABASE} --quiet
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 2
            failureThreshold: 60
            successThreshold: 1
      {{ include "common.networking.dnsConfiguration" .Values | nindent 6 }}
      volumes: {{ include "common.storage.configureAppVolumes" .Values | nindent 8 }}
        {{ range $index, $hostPathConfiguration := .Values.extraAppVolumeMounts }}
        - name: extrappvolume-{{ $index }}
          hostPath:
            path: {{ $hostPathConfiguration.hostPath }}
        {{ end }}

{{/* Returns the name of the Chart */}}
{{- define "ix.v1.common.lib.chart.names.name" -}}

  {{- .Chart.Name | lower | trunc 63 | trimSuffix "-" -}}

{{- end -}}

{{- define "ix.v1.common.lib.chart.names.fullname" -}}

  {{- $name := include "ix.v1.common.lib.chart.names.name" . -}}

  {{- if contains $name .Release.Name -}}
    {{- $name = .Release.Name -}}
  {{- else -}}
    {{- $name = printf "%s-%s" .Release.Name $name -}}
  {{- end -}}

  {{- $name | lower | trunc 63 | trimSuffix "-" -}}

{{- end -}}

{{/* Validates names */}}
{{- define "ix.v1.common.lib.chart.names.validation" -}}

  {{- $name := .name -}}

  {{- if not (mustRegexMatch "^[a-z0-9]([a-z0-9]-?|-?[a-z0-9]){0,61}[a-z0-9]$" $name) -}}
    {{- fail (printf "Name [%s] is not valid. Must start and end with an alphanumeric lowercase character. It can contain '-'. And must be at most 63 characters." $name) -}}
  {{- end -}}

{{- end -}}

{{/* Create chart name and version as used by the chart label */}}
{{- define "ix.v1.common.lib.chart.names.chart" -}}

  {{- printf "%s-%s" .Chart.Name .Chart.Version | replace "+" "_" | trunc 63 | trimSuffix "-" -}}

{{- end -}}


{{ include "ix.v1.common.spawner.service" $ -}}
